{"version":3,"sources":["components/Content.js","components/MovieItem.js","components/Movies.js","components/Read.js","components/Create.js","components/edit.js","App.js","serviceWorker.js","index.js"],"names":["Content","className","Date","toLocaleTimeString","React","Component","MovieItem","deleteMovie","bind","e","preventDefault","axios","delete","this","props","movie","_id","then","ReloadDataMethod","catch","Card","Header","Title","Body","src","Poster","Year","to","Button","variant","onClick","Movies","movies","map","key","Read","state","get","response","setState","data","error","console","log","Create","onSubmit","onChangetitle","onChangeyear","onChangeposter","title","year","poster","alert","newMovie","post","res","err","target","value","type","onChange","Edit","match","params","id","editMovie","put","JSON","stringify","App","Navbar","bg","Brand","href","Nav","Link","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8ef0d1b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nexport class Content extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Hello World</h1> \r\n                <h2>It is {new Date().toLocaleTimeString()}.</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport axios from 'axios'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport class MovieItem extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.deleteMovie = this.deleteMovie.bind(this);\r\n    }\r\n\r\n    deleteMovie(e){\r\n        e.preventDefault();\r\n        axios.delete(\"http://localhost:4000/api/movies/\"+this.props.movie._id)\r\n        .then(()=>{\r\n            this.props.ReloadDataMethod();\r\n        })\r\n        .catch();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <h3>{this.props.movie.Title}</h3>\r\n                <p>{this.props.movie.Year}</p>\r\n                <img src={this.props.movie.Poster}></img> */}\r\n                <Card>\r\n                    <Card.Header>{this.props.movie.Title}</Card.Header>\r\n                    <Card.Body>\r\n                        <blockquote className=\"blockquote mb-0\">\r\n                        <img src={this.props.movie.Poster}></img>\r\n                            <footer className=\"blockquote-footer\">\r\n                              {this.props.movie.Year}\r\n                            </footer>\r\n                        </blockquote>\r\n                    </Card.Body>\r\n                    <Link to={\"/edit/\"+ this.props.movie._id} className='btn btn-primary'>Edit</Link>\r\n                    <Button variant=\"danger\"  onClick={this.deleteMovie}>Delete</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { MovieItem } from './MovieItem';\r\n\r\n\r\nexport class Movies extends React.Component{\r\n\r\n    render(){\r\n        return this.props.movies.map((movie)=>{\r\n            //console.log({movie});\r\n            return <MovieItem key={movie._id} movie={movie}\r\n            ReloadDataMethod={this.props.ReloadDataMethod}></MovieItem>\r\n            });\r\n            \r\n            \r\n\r\n    }\r\n}","import React from 'react';\r\nimport { Movies } from './Movies';\r\nimport axios from 'axios';\r\n\r\nexport class Read extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.ReloadDataMethod = this.ReloadDataMethod.bind(this);\r\n    }\r\n\r\n    state = {\r\n        movies: []\r\n\r\n    };\r\n    //every time a component change a promise is send to a website that return data either succesfull or unsuccsesfull\r\n    componentDidMount() {\r\n        //HTTP client that allows us to make GET and POST requests from the browser\r\n        axios.get('http://localhost:4000/api/movies')\r\n            .then((response) => {\r\n                this.setState({ movies: response.data })//setStates doing UI update and calling the render method. \r\n            })\r\n            .catch((error) => { // if its unfulfilled its gonna generate an error in the console\r\n                console.log(error)\r\n            });\r\n    }\r\n\r\n    ReloadDataMethod() {\r\n        //HTTP client that allows us to make GET and POST requests from the browser\r\n        axios.get('http://localhost:4000/api/movies')\r\n            .then((response) => {\r\n                this.setState({ movies: response.data })//setStates doing UI update and calling the render method. \r\n            })\r\n            .catch((error) => { // if its unfulfilled its gonna generate an error in the console\r\n                console.log(error)\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Hello from my read component</h3>\r\n                <Movies movies={this.state.movies} ReloadDataMethod={this.ReloadDataMethod}></Movies>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport axios from 'axios'\r\n\r\nexport class Create extends  React.Component {\r\n    constructor() {\r\n        super();\r\n        //we need to bind the event handlers on constructor so we can use them among other events.\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onChangetitle = this.onChangetitle.bind(this);\r\n        this.onChangeyear = this.onChangeyear.bind(this);\r\n        this.onChangeposter = this.onChangeposter.bind(this);\r\n\r\n        //Initializing local state by assigning an object to this.state\r\n        this.state = {\r\n            title: '',\r\n            year: '',\r\n            poster: '',\r\n        }\r\n    }\r\n    //method to check if the information is stored \r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        alert(\"Movie:\" + this.state.title +\" \" +\"year: \" + this.state.year +\" \"+ this.state.poster +\" Added.\");\r\n        //object\r\n        const newMovie = {\r\n            title : this.state.title,\r\n            year : this.state.year,\r\n            poster : this.state.poster\r\n        }\r\n        //HTTP client that allows us to make GET and POST requests from the browser\r\n        axios.post('http://localhost:4000/api/movies', newMovie)\r\n        .then((res)=>{\r\n            console.log(res)\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        });\r\n\r\n    }\r\n\r\n    //method to change the title information for the object in the this.state  \r\n    onChangetitle(e) {\r\n        this.setState({\r\n            title: e.target.value\r\n        });\r\n    }\r\n    //method to change the year information for the object in the this.state \r\n    onChangeyear(e){\r\n        this.setState({\r\n            year: e.target.value\r\n        });\r\n    }\r\n    //method to change the poster information for the object in the this.state \r\n    onChangeposter(e){\r\n        this.setState({\r\n            poster: e.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return (//divs/form/labels/input field to get the information and to be formated\r\n            <div className='App'>             \r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className='form-group'>\r\n                        <label>Add Movie Title</label>\r\n                        <input type='text'\r\n                            className=\"form-control\"\r\n                            value={this.state.title}\r\n                            onChange={this.onChangetitle}>\r\n                        </input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <label>Add Movie Year</label>\r\n                        <input type='text'\r\n                            className=\"form-control\"\r\n                            value={this.state.year}\r\n                            onChange={this.onChangeyear}>\r\n                        </input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <label>Add Movie Poster</label>\r\n                        <input type='text'\r\n                            className=\"form-control\"\r\n                            value={this.state.poster}\r\n                            onChange={this.onChangeposter}>\r\n                        </input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <input type='submit' value='Add Movie' className='btn btn-primary'></input>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport axios from 'axios'\r\n\r\nexport class Edit extends  React.Component {\r\n    constructor() {\r\n        super();\r\n        //we need to bind the event handlers on constructor so we can use them among other events.\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onChangetitle = this.onChangetitle.bind(this);\r\n        this.onChangeyear = this.onChangeyear.bind(this);\r\n        this.onChangeposter = this.onChangeposter.bind(this);\r\n\r\n        //Initializing local state by assigning an object to this.state\r\n        this.state = {\r\n            title: '',\r\n            year: '',\r\n            poster: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('http://localhost:4000/api/movies/' +this.props.match.params.id)\r\n        .then((response)=>{\r\n            this.setState({\r\n                _id: response.data._id,\r\n                title:response.data.Title,\r\n                year: response.data.Year,\r\n                poster:response.data.Poster\r\n            })\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        });\r\n    }\r\n    //method to check if the information is stored \r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        //alert(\"Movie:\" + this.state.title +\" \" +\"year: \" + this.state.year +\" \"+ this.state.poster +\" Added.\");\r\n        //object\r\n        const editMovie = {\r\n            Title : this.state.title,\r\n            Year : this.state.year,\r\n            Poster : this.state.poster,\r\n            _id : this.state._id\r\n        }\r\n        //HTTP client that allows us to make GET and POST requests from the browser\r\n        axios.put('http://localhost:4000/api/movies/' + this.state._id, editMovie)\r\n        .then((res)=>{\r\n            console.log(\"tesssssssssssssst \" +JSON.stringify(res))\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        });\r\n\r\n    }\r\n\r\n    //method to change the title information for the object in the this.state  \r\n    onChangetitle(e) {\r\n        this.setState({\r\n            title: e.target.value\r\n        });\r\n    }\r\n    //method to change the year information for the object in the this.state \r\n    onChangeyear(e){\r\n        this.setState({\r\n            year: e.target.value\r\n        });\r\n    }\r\n    //method to change the poster information for the object in the this.state \r\n    onChangeposter(e){\r\n        this.setState({\r\n            poster: e.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return (//divs/form/labels/input field to get the information and to be formated\r\n            <div className='App'>             \r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className='form-group'>\r\n                        <label>Add Movie Title</label>\r\n                        <input type='text'\r\n                            className=\"form-control\"\r\n                            value={this.state.title}\r\n                            onChange={this.onChangetitle}>\r\n                        </input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <label>Add Movie Year</label>\r\n                        <input type='text'\r\n                            className=\"form-control\"\r\n                            value={this.state.year}\r\n                            onChange={this.onChangeyear}>\r\n                        </input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <label>Add Movie Poster</label>\r\n                        <input type='text'\r\n                            className=\"form-control\"\r\n                            value={this.state.poster}\r\n                            onChange={this.onChangeposter}>\r\n                        </input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <input type='submit' value='Edit Movie' className='btn btn-primary'></input>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Content } from './components/Content';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Navbar, Nav, } from 'react-bootstrap'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport { Read } from './components/Read';\r\nimport { Create } from './components/Create';\r\nimport { Edit } from './components/edit';\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n       //All the components are loaded underneath navBar\r\n      <Router>\r\n        <div className=\"App\"> \r\n          <Navbar bg=\"primary\" variant=\"dark\">\r\n            <Navbar.Brand href=\"/\">MyApp</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"/\">Home</Nav.Link>\r\n              <Nav.Link href=\"/read\">Read</Nav.Link>\r\n              <Nav.Link href=\"/create\">Create</Nav.Link>\r\n            </Nav>\r\n          </Navbar>\r\n          <Switch>\r\n            <Route path='/' component={Content} exact></Route>\r\n            <Route path='/read' component={Read}></Route>        \r\n            <Route path='/create' component={Create}></Route>\r\n            <Route path='/edit/:id' component={Edit}></Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n      //When we go to home its calling the component content\r\n      //When we go to read its calling the component read\r\n      //When we go to create its calling the component create\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}